import os
import subprocess
import time
import sys
from datetime import datetime

def install_dependencies_linux():
    print("üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö adb ‡πÅ‡∏•‡∏∞ psutil...")

    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á adb ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
    try:
        subprocess.run(["adb", "version"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print("‚úÖ adb ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á adb ‡∏ú‡πà‡∏≤‡∏ô apt...")
        subprocess.run(["sudo", "apt", "update"], check=True)
        subprocess.run(["sudo", "apt", "install", "-y", "adb"], check=True)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö psutil ‡πÅ‡∏ö‡∏ö system-wide
    try:
        import psutil
        print("‚úÖ psutil ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß")
    except ImportError:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ Linux ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï pip system-wide
        print("üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á psutil...")
        try:
            # ‡πÉ‡∏ä‡πâ apt ‡πÅ‡∏ó‡∏ô pip
            subprocess.run(["sudo", "apt", "install", "-y", "python3-psutil"], check=True)
            import psutil  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        except Exception as e:
            print(f"‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á psutil ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            print("üí° ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ virtual environment ‡∏´‡∏£‡∏∑‡∏≠ pipx ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Linux ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î pip")
            sys.exit(1)

def list_storage_devices():
    import psutil
    print("üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡∏£‡∏ü‡πå‡∏ó‡∏µ‡πà mount ‡∏≠‡∏¢‡∏π‡πà:")
    drives = []
    for p in psutil.disk_partitions():
        drives.append(p.mountpoint)
        print(f" - {p.mountpoint}")
    return drives

def select_drive(drives):
    choice = input("üß≠ ‡∏£‡∏∞‡∏ö‡∏∏ path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö backup (‡πÄ‡∏ä‡πà‡∏ô /media/usb): ").strip()
    if choice in drives or os.path.exists(choice):
        return choice
    else:
        print("‚ùå path ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        sys.exit(1)

def list_android_devices():
    try:
        output = subprocess.check_output(['adb', 'devices'], encoding='utf-8')
        lines = output.strip().split('\n')[1:]
        devices = [line.split('\t')[0] for line in lines if 'device' in line]
        return devices
    except Exception:
        return []

def is_device_connected(device_id):
    return device_id in list_android_devices()

def pull_from_android(device_id, remote_path, local_path, log_file):
    try:
        if not is_device_connected(device_id):
            raise RuntimeError("üì¥ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≠‡∏î‡∏≠‡∏≠‡∏Å")
        os.makedirs(local_path, exist_ok=True)
        subprocess.run(['adb', '-s', device_id, 'pull', remote_path, local_path], check=True)
        log = f"[‚úÖ OK] Pulled {remote_path} ‚Üí {local_path}"
    except Exception as e:
        log = f"[‚ùå FAIL] {remote_path} ‚Üí {local_path} | {e}"
        print(log)
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(log + '\n')
        raise
    print(log)
    with open(log_file, 'a', encoding='utf-8') as f:
        f.write(log + '\n')

if __name__ == "__main__":
    print("üìÇ Preparing Android backup system for Linux...")

    install_dependencies_linux()

    drives = list_storage_devices()
    target_drive = select_drive(drives)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_root = os.path.join(target_drive, f"AndroidBackup_{timestamp}")
    os.makedirs(backup_root, exist_ok=True)
    log_file = os.path.join(backup_root, "backup_log.txt")

    print("üîç ‡∏£‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Android (‡πÄ‡∏õ‡∏¥‡∏î USB debugging)...")
    android_devices = []
    while not android_devices:
        android_devices = list_android_devices()
        if not android_devices:
            print("‚åõ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
            time.sleep(3)

    device_id = android_devices[0]
    print(f"‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {device_id}")
    print("üì• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")

    folders_to_pull = [
        "/sdcard/DCIM",
        "/sdcard/Download",
        "/sdcard/Documents",
        "/sdcard/WhatsApp"
    ]

    try:
        for folder in folders_to_pull:
            folder_name = os.path.basename(folder)
            local_path = os.path.join(backup_root, folder_name)
            pull_from_android(device_id, folder, local_path, log_file)
    except Exception as e:
        print(f"üõë Backup ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {e}")
        sys.exit(1)

    print("\n‚úÖ Backup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
    print(f"üìÅ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {backup_root}")
    print(f"üìù Log ‡πÑ‡∏ü‡∏•‡πå: {log_file}")
