import os
import subprocess
import time
import sys
import platform
from datetime import datetime

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
REQUIRED_LIBRARIES = ["psutil"]

def install_and_import(lib):
    try:
        __import__(lib)
        print(f"[‚úî] Library '{lib}' is already installed.")
    except ImportError:
        print(f"[+] Installing '{lib}' ...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", lib])

for lib in REQUIRED_LIBRARIES:
    install_and_import(lib)

import psutil

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∞‡πÑ‡∏£
IS_WINDOWS = os.name == 'nt'
IS_LINUX = platform.system() == 'Linux'

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ ADB ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏´‡∏°
def check_adb():
    try:
        subprocess.check_output(["adb", "version"], stderr=subprocess.STDOUT)
        print("[‚úî] ADB is available.")
    except Exception as e:
        print("[‚ùå] ADB not installed or not found in PATH.")
        if IS_LINUX:
            print("üîß Installing ADB via package manager (Linux)...")
            subprocess.run(["sudo", "apt", "update"])
            subprocess.run(["sudo", "apt", "install", "-y", "adb"])
        elif IS_WINDOWS:
            print("üì¶ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ADB ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏à‡∏≤‡∏Å: https://developer.android.com/tools/releases/platform-tools")
            sys.exit(1)

# ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡∏£‡∏ü‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
def list_storage_devices():
    print("üì¶ Connected drives or partitions:")
    drives = []
    for p in psutil.disk_partitions():
        if IS_WINDOWS:
            drives.append(p.device)
            print(f" - {p.device} ({p.mountpoint})")
        else:
            drives.append(p.mountpoint)
            print(f" - {p.mountpoint}")
    return drives

# ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
def select_drive(drives):
    choice = input("üìÅ Enter the path to save backup (e.g., E:\\ or /media/usb): ").strip()
    if choice in drives or os.path.exists(choice):
        return choice
    else:
        print("‚ùå Invalid path.")
        sys.exit(1)

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Android Device
def list_android_devices():
    try:
        output = subprocess.check_output(['adb', 'devices'], encoding='utf-8')
        lines = output.strip().split('\n')[1:]
        devices = [line.split('\t')[0] for line in lines if 'device' in line]
        return devices
    except Exception as e:
        return []

# ‡∏î‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Android
def pull_from_android(device_id, remote_path, local_path, log_file):
    try:
        os.makedirs(local_path, exist_ok=True)
        subprocess.run(['adb', '-s', device_id, 'pull', remote_path, local_path], check=True)
        log = f"[‚úÖ OK] Pulled {remote_path} ‚Üí {local_path}"
    except subprocess.CalledProcessError as e:
        log = f"[‚ùå FAIL] Pull failed: {remote_path} ‚Üí {local_path} | {e}"
    except KeyboardInterrupt:
        log = f"[‚ùå FAIL] Interrupted during pull from {remote_path}"
    print(log)
    with open(log_file, 'a', encoding='utf-8') as f:
        f.write(log + '\n')

# ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ USB ‡∏¢‡∏±‡∏á‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
def is_device_connected(device_id):
    devices = list_android_devices()
    return device_id in devices

# ------------------ MAIN ------------------ #
if __name__ == "__main__":
    print("üìÇ Preparing Android Backup System...\n")

    check_adb()

    # 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö
    drives = list_storage_devices()
    target_path = select_drive(drives)

    # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_root = os.path.join(target_path, f"AndroidBackup_{timestamp}")
    os.makedirs(backup_root, exist_ok=True)
    log_file = os.path.join(backup_root, "backup_log.txt")

    # 3. ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ Android ‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    print("üîç Waiting for Android device (USB debugging must be enabled)...")
    android_devices = []
    while not android_devices:
        android_devices = list_android_devices()
        if not android_devices:
            print("‚åõ Still waiting...")
            time.sleep(3)

    device_id = android_devices[0]
    print(f"‚úÖ Found Android device: {device_id}")

    # 4. ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡∏î
    folders_to_pull = [
        "/sdcard/DCIM",
        "/sdcard/Download",
        "/sdcard/Documents",
        "/sdcard/WhatsApp"
    ]

    print("üì• Starting backup process...")
    for folder in folders_to_pull:
        folder_name = os.path.basename(folder)
        local_folder = os.path.join(backup_root, folder_name)

        if not is_device_connected(device_id):
            print(f"‚ùå USB disconnected while pulling {folder}. Exiting.")
            with open(log_file, 'a') as f:
                f.write(f"[ERROR] USB disconnected while pulling {folder}\n")
            sys.exit(1)

        pull_from_android(device_id, folder, local_folder, log_file)

    print("\n‚úÖ Backup completed.")
    print(f"üìÅ Files saved in: {backup_root}")
    print(f"üìù Log saved at: {log_file}")
